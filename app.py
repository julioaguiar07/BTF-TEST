import streamlit as st
import sqlite3
import pandas as pd
from datetime import datetime, timedelta
from fpdf import FPDF
import plotly.express as px
import requests 
import base64


# Configura√ß√£o de estilo
st.set_page_config(page_title="Gest√£o de Processos", layout="wide")
st.markdown(
    """
    <style>
    .main-container {
        background-color: #f9f9f9;
        padding: 20px;
    }
    .sidebar {
        background-color: #0E2C4E;
        color: white;
    }
    .process-card {
        background-color: #ffffff;
        border: 1px solid #e0e0e0;
        border-radius: 8px;
        padding: 16px;
        margin-bottom: 16px;
        box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
        color: #333333;
    }
    .process-card h4 {
        color: #0E2C4E;
        margin: 0;
    }
    .metric-box {
        background-color: #CF8C28;
        border-radius: 8px;
        padding: 20px;
        text-align: center;
        box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
    }
    .metric-box h3 {
        margin: 0;
        color: #ffffff;
        font-size: 24px;
        font-weight: bold;
    }
    .metric-box p {
        margin: 0;
        font-size: 20px;
        color: #ffffff;
    }
    .stButton button {
        background-color: #0E2C4E;
        color: white;
        border-radius: 8px;
        padding: 10px 20px;
        font-size: 16px;
    }
    .stButton button:hover {
        background-color: #CF8C28;
    }
    </style>
    """,
    unsafe_allow_html=True
)

# Conectar ao banco de dados
conn = sqlite3.connect('gestao_processos.db')
cursor = conn.cursor()

# Criar tabela de processos
cursor.execute('''
CREATE TABLE IF NOT EXISTS processos (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    numero_processo TEXT NOT NULL,
    data TEXT NOT NULL,
    prazo_final TEXT NOT NULL,
    descricao TEXT NOT NULL,
    responsavel TEXT NOT NULL,
    status TEXT NOT NULL,
    prioridade TEXT NOT NULL
)
''')

# Criar tabela de tarefas
cursor.execute('''
CREATE TABLE IF NOT EXISTS tarefas (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    id_processo INTEGER NOT NULL,
    descricao TEXT NOT NULL,
    data TEXT NOT NULL,
    concluida INTEGER DEFAULT 0
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS financeiro (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    id_processo INTEGER NOT NULL,
    tipo TEXT NOT NULL,  -- Honor√°rio, Pagamento, Despesa
    valor REAL NOT NULL,
    data TEXT NOT NULL,
    descricao TEXT
)
''')
conn.commit()

def get_base64(file_path):
    with open(file_path, "rb") as file:
        encoded = base64.b64encode(file.read()).decode()
    return encoded

background_image = get_base64("fundo.png")

st.markdown(
    f"""
    <style>
        .stApp {{
            background: url("data:image/png;base64,{background_image}");
            background-size: cover;
            background-position: center;
        }}
    </style>
    """,
    unsafe_allow_html=True
)
# Fun√ß√µes do sistema
def adicionar_processo(numero_processo, data, prazo_final, descricao, responsavel, status, prioridade):
    cursor.execute('''
    INSERT INTO processos (numero_processo, data, prazo_final, descricao, responsavel, status, prioridade)
    VALUES (?, ?, ?, ?, ?, ?, ?)
    ''', (numero_processo, data, prazo_final, descricao, responsavel, status, prioridade))
    conn.commit()

def excluir_processo(id_processo):
    cursor.execute('DELETE FROM processos WHERE id = ?', (id_processo,))
    conn.commit()

def buscar_processos(numero_processo=None, status=None, responsavel=None, prioridade=None):
    query = 'SELECT * FROM processos WHERE 1=1'
    params = []
    if numero_processo:
        query += ' AND numero_processo = ?'
        params.append(numero_processo)
    if status:
        query += ' AND status = ?'
        params.append(status)
    if responsavel:
        query += ' AND responsavel = ?'
        params.append(responsavel)
    if prioridade:
        query += ' AND prioridade = ?'
        params.append(prioridade)
    cursor.execute(query, tuple(params))
    return cursor.fetchall()

def atualizar_processo(id_processo, novo_status):
    cursor.execute('UPDATE processos SET status = ? WHERE id = ?', (novo_status, id_processo))
    conn.commit()

def contar_processos_por_status():
    cursor.execute('SELECT status, COUNT(*) FROM processos GROUP BY status')
    return {status: count for status, count in cursor.fetchall()}


TOKEN = "7675741218:AAHTrrWDS05aiSq2qY3vcrAhsLNLRaz9dhI"
CHAT_ID = "-1002371255186" 

def enviar_mensagem(texto):
    url = f"https://api.telegram.org/bot{TOKEN}/sendMessage"
    payload = {"chat_id": CHAT_ID, "text": texto}
    response = requests.post(url, json=payload)
    print(response.json())  # Para depura√ß√£o

def verificar_prazos():
    cursor.execute('SELECT id, prazo_final, numero_processo FROM processos WHERE status = "Em andamento"')
    processos = cursor.fetchall()

    hoje = datetime.now()
    for processo in processos:
        prazo_final = datetime.strptime(processo[1], "%Y-%m-%d")
        dias_restantes = (prazo_final - hoje).days

        if 0 < dias_restantes <= 7:  
            mensagem = f"Queria te avisar que o processo n¬∫ {processo[2]} est√° pr√≥ximo do prazo final ({prazo_final.strftime('%Y-%m-%d')}). Faltam {dias_restantes} dias."
            enviar_mensagem(mensagem)
            st.sidebar.success(f"Mensagem enviada para o processo n¬∫ {processo[2]}")
def gerar_relatorio_pdf(processos):
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", size=12)
    for processo in processos:
        pdf.cell(200, 10, txt=f"Processo n¬∫ {processo[1]} - Respons√°vel: {processo[5]} - Descri√ß√£o: {processo[4]} - PRAZO FINAL: {processo[3]}", ln=True)
    pdf.output("relatorio.pdf")
    st.success("Relat√≥rio gerado com sucesso!")

def adicionar_tarefa(id_processo, descricao, data):
    cursor.execute('''
    INSERT INTO tarefas (id_processo, descricao, data)
    VALUES (?, ?, ?)
    ''', (id_processo, descricao, data))
    conn.commit()

def listar_tarefas(id_processo):
    cursor.execute('SELECT * FROM tarefas WHERE id_processo = ?', (id_processo,))
    return cursor.fetchall()

def adicionar_registro_financeiro(id_processo, tipo, valor, data, descricao):
    cursor.execute('''
    INSERT INTO financeiro (id_processo, tipo, valor, data, descricao)
    VALUES (?, ?, ?, ?, ?)
    ''', (id_processo, tipo, valor, data, descricao))
    conn.commit()

def listar_registros_financeiros(id_processo=None):
    query = 'SELECT * FROM financeiro'
    params = []
    if id_processo:
        query += ' WHERE id_processo = ?'
        params.append(id_processo)
    cursor.execute(query, tuple(params))
    return cursor.fetchall()

def calcular_total_financeiro():
    cursor.execute('SELECT tipo, SUM(valor) FROM financeiro GROUP BY tipo')
    return {tipo: total for tipo, total in cursor.fetchall()}

# Fun√ß√£o para buscar processo na Brasil API
def buscar_processo_brasil_api(numero_processo):
    # Remove pontos e h√≠fens para verificar se o restante s√£o d√≠gitos
    numero_limpo = numero_processo.replace(".", "").replace("-", "")
    
    # Verifica se o n√∫mero do processo est√° no formato CNJ
    if not numero_processo or not numero_limpo.isdigit() or len(numero_limpo) != 20:
        st.error("N√∫mero do processo inv√°lido. O n√∫mero deve estar no formato CNJ (exemplo: 5001682-88.2020.8.13.0672).")
        return None

    url = f"https://brasilapi.com.br/api/cnj/v1/{numero_processo}"
    try:
        response = requests.get(url)
        response.raise_for_status()  # Levanta uma exce√ß√£o para c√≥digos de erro HTTP
        return response.json()  # Retorna os dados do processo
    except requests.exceptions.HTTPError as e:
        if response.status_code == 404:
            st.error("Processo n√£o encontrado. Verifique o n√∫mero do processo e tente novamente.")
        else:
            st.error(f"Erro ao consultar o processo: {e}")
    except requests.exceptions.RequestException as e:
        st.error(f"Erro de conex√£o: {e}")
    return None

# Interface do Streamlit
st.sidebar.title("Gest√£o de Processos üìÇ")
st.sidebar.text("Sistema de Gerenciamento")

opcao = st.sidebar.radio("P√°ginas", ["In√≠cio", "Cadastrar Processos", "Tarefas", "Relat√≥rios", "Controle Financeiro"])

if opcao == "In√≠cio":
    st.image("logo.png", width=300)
    st.subheader("Consulta e Atualiza√ß√£o de Processos")
    
    # Campo para buscar processo na Brasil API
    st.write("### Consultar Processo na Brasil API")
    numero_processo = st.text_input("Digite o n√∫mero do processo (formato CNJ):")

    if st.button("Buscar Processo"):
        if numero_processo:
            dados_processo = buscar_processo_brasil_api(numero_processo)
            if dados_processo:
                st.write("### Dados do Processo")
                st.json(dados_processo)  # Exibe os dados em formato JSON
        else:
            st.error("Por favor, insira um n√∫mero de processo v√°lido.")

    # Filtros
    st.write("### Filtrar Processos")
    filtro_status = st.selectbox("Filtrar por Situa√ß√£o", ["",
                                        "Aguardando Audi√™ncia",
                                        "Aguardando Cita√ß√£o",
                                        "Aguardando Dilig√™ncia",
                                        "Aguardando Manifesta√ß√£o das Partes",
                                        "Aguardando Pagamento",
                                        "Aguardando Per√≠cia",
                                        "Aguardando Provas",
                                        "Aguardando Recurso",
                                        "Aguardando Resposta do R√©u",
                                        "Aguardando Senten√ßa",
                                        "Arquivado",
                                        "Audi√™ncia Realizada ‚Äì Aguardando Decis√£o",
                                        "Baixado",
                                        "Decis√£o Transitada em Julgado",
                                        "Desist√™ncia",
                                        "Distribu√≠do",
                                        "Em Andamento",
                                        "Em Cumprimento de Acordo",
                                        "Em Fase Recursal",
                                        "Em Execu√ß√£o de Senten√ßa",
                                        "Extinto sem Resolu√ß√£o do M√©rito",
                                        "Finalizado",
                                        "Homologado Acordo",
                                        "Improcedente",
                                        "Parcialmente Procedente",
                                        "Procedente",
                                        "Senten√ßa Proferida",
                                        "Suspenso"])
    filtro_responsavel = st.text_input("Buscar por Respons√°vel")
    filtro_prioridade = st.selectbox("Filtrar por Prioridade", ["", "Alta", "M√©dia", "Baixa"])

    resultados = buscar_processos(
        status=filtro_status if filtro_status else None,
        responsavel=filtro_responsavel if filtro_responsavel else None,
        prioridade=filtro_prioridade if filtro_prioridade else None
    )

    # Exibir processos
    st.write("### Processos Encontrados")
    for processo in resultados:
        with st.expander(f"Processo n¬∫ {processo[1]} - Respons√°vel: {processo[5]}"):
            st.write(f"**Data:** {processo[2]}")
            st.write(f"**Prazo Final:** {processo[3]}")
            st.write(f"**Descri√ß√£o:** {processo[4]}")
            st.write(f"**Status Atual:** {processo[6]}")
            st.write(f"**Prioridade:** {processo[7]}")

            novo_status = st.selectbox("Atualizar Status", [                                        
                                        "Aguardando Audi√™ncia",
                                        "Aguardando Cita√ß√£o",
                                        "Aguardando Dilig√™ncia",
                                        "Aguardando Manifesta√ß√£o das Partes",
                                        "Aguardando Pagamento",
                                        "Aguardando Per√≠cia",
                                        "Aguardando Provas",
                                        "Aguardando Recurso",
                                        "Aguardando Resposta do R√©u",
                                        "Aguardando Senten√ßa",
                                        "Arquivado",
                                        "Audi√™ncia Realizada ‚Äì Aguardando Decis√£o",
                                        "Baixado",
                                        "Decis√£o Transitada em Julgado",
                                        "Desist√™ncia",
                                        "Distribu√≠do",
                                        "Em Andamento",
                                        "Em Cumprimento de Acordo",
                                        "Em Fase Recursal",
                                        "Em Execu√ß√£o de Senten√ßa",
                                        "Extinto sem Resolu√ß√£o do M√©rito",
                                        "Finalizado",
                                        "Homologado Acordo",
                                        "Improcedente",
                                        "Parcialmente Procedente",
                                        "Procedente",
                                        "Senten√ßa Proferida",
                                        "Suspenso"], key=f"status_{processo[0]}")
            if st.button("Atualizar", key=f"atualizar_{processo[0]}"):
                atualizar_processo(processo[0], novo_status)
                st.success("Status atualizado com sucesso!")
                st.experimental_rerun()

            if st.button("Excluir", key=f"excluir_{processo[0]}"):
                excluir_processo(processo[0])
                st.success("Processo exclu√≠do com sucesso!")
                st.experimental_rerun()

    # Verificar prazos
    if st.sidebar.button("Verificar Prazos"):
        verificar_prazos()
        st.sidebar.success("Verifica√ß√£o de prazos conclu√≠da!")

elif opcao == "Cadastrar Processos":
    st.title("Cadastrar Novo Processo")

    # Op√ß√£o para escolher entre adicionar manualmente ou buscar automaticamente
    modo_cadastro = st.radio("Escolha o modo de cadastro:", ("Manual", "Autom√°tico (Brasil API)"))

    if modo_cadastro == "Manual":
        with st.form("form_cadastro_manual"):
            numero_processo = st.text_input("N¬∫ do Processo")
            data = st.text_input("Data (ex: 2022-10-11)")
            prazo_final = st.text_input("Prazo Final (ex: 2023-09-03)")
            descricao = st.text_input("Descri√ß√£o")
            responsavel = st.text_input("Respons√°vel")
            status = st.selectbox("Situa√ß√£o", [
                                "Aguardando Audi√™ncia",
                                "Aguardando Cita√ß√£o",
                                "Aguardando Dilig√™ncia",
                                "Aguardando Manifesta√ß√£o das Partes",
                                "Aguardando Pagamento",
                                "Aguardando Per√≠cia",
                                "Aguardando Provas",
                                "Aguardando Recurso",
                                "Aguardando Resposta do R√©u",
                                "Aguardando Senten√ßa",
                                "Arquivado",
                                "Audi√™ncia Realizada ‚Äì Aguardando Decis√£o",
                                "Baixado",
                                "Decis√£o Transitada em Julgado",
                                "Desist√™ncia",
                                "Distribu√≠do",
                                "Em Andamento",
                                "Em Cumprimento de Acordo",
                                "Em Fase Recursal",
                                "Em Execu√ß√£o de Senten√ßa",
                                "Extinto sem Resolu√ß√£o do M√©rito",
                                "Finalizado",
                                "Homologado Acordo",
                                "Improcedente",
                                "Parcialmente Procedente",
                                "Procedente",
                                "Senten√ßa Proferida",
                                "Suspenso"
                            ])
            prioridade = st.selectbox("Prioridade", ["Alta", "M√©dia", "Baixa"])
            enviar = st.form_submit_button("Cadastrar Processo")

            if enviar:
                adicionar_processo(numero_processo, data, prazo_final, descricao, responsavel, status, prioridade)
                st.success("Processo cadastrado com sucesso!")
                enviar_mensagem(f"Um novo processo de n√∫mero {numero_processo} foi criado! O respons√°vel por ele √©: {responsavel}, sua situa√ß√£o: {status}, e sua descri√ß√£o √©: {descricao}. Prazo final: {prazo_final}.")

    elif modo_cadastro == "Autom√°tico (Brasil API)":
        with st.form("form_cadastro_automatico"):
            numero_processo = st.text_input("N¬∫ do Processo (formato CNJ, ex: 0710802-55.2018.8.02.0001)")
            buscar = st.form_submit_button("Buscar Processo")

            if buscar:
                if not numero_processo:
                    st.error("Por favor, insira um n√∫mero de processo v√°lido.")
                else:
                    dados_processo = buscar_processo_brasil_api(numero_processo)
                    if dados_processo:
                        st.write("### Dados do Processo Encontrado")
                        st.write(f"**N√∫mero do Processo:** {dados_processo.get('numero')}")
                        st.write(f"**Classe:** {dados_processo.get('classe')}")
                        st.write(f"**Assunto:** {dados_processo.get('assunto')}")
                        st.write(f"**√ìrg√£o Julgador:** {dados_processo.get('orgao_julgador')}")
                        st.write(f"**Status:** {dados_processo.get('status')}")

                        # Preencher automaticamente o formul√°rio de cadastro
                        data = datetime.now().strftime("%Y-%m-%d")
                        prazo_final = (datetime.now() + timedelta(days=30)).strftime("%Y-%m-%d")  # Prazo de 30 dias
                        descricao = f"Processo {dados_processo.get('numero')} - {dados_processo.get('assunto')}"
                        responsavel = "Respons√°vel Padr√£o"  # Defina um respons√°vel padr√£o ou permita a edi√ß√£o
                        status = "Em andamento"
                        prioridade = "M√©dia"

                        if st.form_submit_button("Cadastrar com Dados da API"):
                            adicionar_processo(numero_processo, data, prazo_final, descricao, responsavel, status, prioridade)
                            st.success("Processo cadastrado com sucesso!")

elif opcao == "Tarefas":
    st.title("Gest√£o de Tarefas")
    id_processo = st.number_input("ID do Processo", min_value=1)
    descricao = st.text_input("Descri√ß√£o da Tarefa")
    data_tarefa = st.text_input("Data da Tarefa (ex: 2023-09-03)")
    if st.button("Adicionar Tarefa"):
        adicionar_tarefa(id_processo, descricao, data_tarefa)
        st.success("Tarefa adicionada com sucesso!")

    st.write("### Tarefas do Processo")
    tarefas = listar_tarefas(id_processo)
    for tarefa in tarefas:
        st.write(f"**Descri√ß√£o:** {tarefa[2]} | **Data:** {tarefa[3]} | **Conclu√≠da:** {'Sim' if tarefa[4] else 'N√£o'}")

elif opcao == "Relat√≥rios":
    st.title("Relat√≥rios")
    if st.button("Gerar Relat√≥rio PDF"):
        processos = buscar_processos()
        gerar_relatorio_pdf(processos)
        st.success("Relat√≥rio gerado com sucesso!")

elif opcao == "Controle Financeiro":
    st.title("Controle Financeiro üí∞")
    st.markdown("---")

    # Adicionar Registro Financeiro
    with st.expander("Adicionar Registro Financeiro"):
        id_processo = st.number_input("ID do Processo", min_value=1, key="financeiro_id_processo")
        tipo = st.selectbox("Tipo", ["Honor√°rio", "Pagamento", "Despesa"], key="financeiro_tipo")
        valor = st.number_input("Valor", min_value=0.0, key="financeiro_valor")
        data = st.text_input("Data (ex: 2023-09-03)", key="financeiro_data")
        descricao = st.text_input("Descri√ß√£o", key="financeiro_descricao")
        if st.button("Adicionar Registro", key="financeiro_adicionar"):
            adicionar_registro_financeiro(id_processo, tipo, valor, data, descricao)
            st.success("Registro financeiro adicionado com sucesso!")

    # Exibir Registros Financeiros
    st.write("### Registros Financeiros")
    registros = listar_registros_financeiros()
    if registros:
        df_financeiro = pd.DataFrame(registros, columns=["ID", "ID Processo", "Tipo", "Valor", "Data", "Descri√ß√£o"])
        st.dataframe(df_financeiro)
    else:
        st.info("Nenhum registro financeiro encontrado.")

    # M√©tricas Financeiras
    st.markdown("---")
    st.write("### M√©tricas Financeiras")
    totais = calcular_total_financeiro()
    col1, col2, col3 = st.columns(3)
    col1.metric("Total Honor√°rios", f"R$ {totais.get('Honor√°rio', 0):.2f}")
    col2.metric("Total Pagamentos", f"R$ {totais.get('Pagamento', 0):.2f}")
    col3.metric("Total Despesas", f"R$ {totais.get('Despesa', 0):.2f}")

    # Gr√°ficos
    st.markdown("---")
    st.write("### Gr√°ficos Financeiros")
    if registros:
        df_financeiro = pd.DataFrame(registros, columns=["ID", "ID Processo", "Tipo", "Valor", "Data", "Descri√ß√£o"])
        
        # Gr√°fico de Pizza (Distribui√ß√£o por Tipo)
        st.write("#### Distribui√ß√£o por Tipo")
        fig_pie = px.pie(df_financeiro, names="Tipo", values="Valor", title="Distribui√ß√£o de Valores por Tipo")
        st.plotly_chart(fig_pie)

        # Gr√°fico de Barras (Valores por Processo)
        st.write("#### Valores por Processo")
        df_processo = df_financeiro.groupby("ID Processo")["Valor"].sum().reset_index()
        fig_bar = px.bar(df_processo, x="ID Processo", y="Valor", title="Valores por Processo")
        st.plotly_chart(fig_bar)
    else:
        st.info("Nenhum dado dispon√≠vel para exibir gr√°ficos.")
